Vamos a entender qué es getElementById: Es un método con el cual podremos acceder algún elemento mediante su id.


*******
html
*******
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1 id="title">hola mundo</h1>
    <h2 class="sub-title">hola mundo otra vez</h2>
    <ul>
        <li>item-1</li>
        <li>item-2</li>
        <li>item-3</li>
    </ul>
    <button id="change-lists" onclick="changeListDom()">change DOM</button>
</body>

</html>

*******
JS
*******
document.getElementById('title').style.color = 'red'

Así como uno puede modificar la UI desde JS uno también puede acceder a textos del HTML e imprimirlos en la consola. 

*******
JS
*******
let titulo = document.getElementById('title');
let texto = titulo.innerText;
console.log(texto);

¿Qué es getElementsByClassName?

Es un método con el cual podremos acceder a los elementos que contienen la misma clase, la diferencia al método anterior es que este retorna un objeto similar a un array de los elementos que contenga dicha clase.

*******
JS
*******
let resultado = document.getElementsByClassName('sub-title')
let subtitle = resultado[0]
subtitle.style.fontSize = "40px"

¿Qué es getElementsByTagName?

Es un método con el cual podremos acceder a los elementos que contienen la misma etiqueta de HTML, Este es similar al método anterior porqué retorna un objeto similar a un array de los elementos que contenga dicha etiqueta de HTML.

*******
JS
*******
const changeListDom = () => {
    let allContentList = document.getElementsByTagName('li')
    allContentList[0].style.fontSize = "26px"
    allContentList[1].style.background = "red"
    allContentList[2].style.color = "blue"
}

Explicación: El DOM es una estructura tipo árbol:

¡Tipos de datos importantes para el manejo del dom!

A continuación veremos algunos tipos de datos que nos servirán para manejar el contenido de elementos de nuestro documento.

    document: Es todo el documento html de la aplicación.

    element: Se refiere a un elemento o a un nodo de tipo elemento del documento, como por ejemplo una etiqueta <h1> o una lista desordenada, este tipo de dato tiene unos métodos muy importantes que son:

        element.innerHTML: devuelve la sintaxis HTML del elemento y todo lo que está dentro del elemento.

        element.innerText: devuelve el contenido en texto del elemento.

        Nota: estos métodos son modificables.

*******
JS
*******
var changeListDom = () => {
    let mainTitle = document.getElementById('title');
    mainTitle.innerHTML = '<p>ahora es un parrafo</p>'
    let allContentList = document.getElementsByTagName('li');
    allContentList[0].innerText = 'cambiamos el texto'
    console.log(mainTitle)
}

¿ Que es y para qué nos sirve "QuerySelector" ?

Es una biblioteca de JavaScript rápida, pequeña y rica en funciones. Hace que cosas como el recorrido y la manipulación de documentos HTML, el manejo de eventos y la animación sean mucho más simples; Con una combinación de versatilidad y flexibilidad.

Para empezar, veamos un selector. Cuando utilizamos la función querySelector() lo que pasamos como parámetro es el selector. Esta función devuelve justamente los elementos de la página que concuerdan con el selector enviado por parámetro, estos pueden ser: # para ID, (.) Para clases, para referirnos a una etiqueta HTML, entre otros.

*****************
HTML
*****************

<!DOCTYPE html>
<html>

<head>
    <title>QuerySelector example</title>
</head>

<body>
    <h1>My web page</h1>
    <p id="paragraph1">This is a paragraph</p>
    <p class="paragraph">This is another paragraph</p>
    <p class="paragraph">Other</p>
    <p class="paragraph">And one more paragraph</p>
    <ul>
        <li>Element 1</li>
        <li>Element 2</li>
        <li>Element 3</li>
    </ul>
</body>

</html>

*****************
JS
*****************
// escribe tu codigo aqui
const myParagraph = document.querySelector("#paragraph1");
// cambia el contenido del parrafo aqui
myParagraph.textContent = "- This is the new paragraph content -";
// llama los id con clase parrafo aqui
const myParagraphs = document.querySelectorAll(".paragraph");
console.log(myParagraphs)


********    SELECTORES BÁSICOS     ************



    ->Selector de etiquetas: $("h1") //selecciona todos los encabezados de nivel 1.

    ->Selector por identificador: Sirven para seleccionar los elementos que tengan un identificador dado, que se asigna a las etiquetas a través del atributo id del HTML. Para utilizar este selector se indica primero el carácter "#" y luego el identificador de cuyo elemento se desee seleccionar.

    $("#id-elemento") esto selecciona una etiqueta que tiene el atributo id="id-elemento"

    ->Selector por clase: Podemos indicar el nombre de una clase (class de CSS) y seleccionar todos los elementos a los que se ha aplicado esta clase. Para ello, como en CSS, comenzamos colocando el carácter "." y luego el nombre de la clase que deseamos seleccionar.

    $(".mi-clase") para seleccionar todos los elementos que tienen el atributo class="mi-clase"

    -> Selector por varias clases: Si lo deseamos, podemos indicar varias clases CSS, para obtener todos los elementos que tienen esas clases aplicadas: todas al mismo tiempo. Esto se consigue comenzando por un ".", igual que los selectores de clases, y luego otro "." para separar las distintas clases que queremos utilizar en el selector.
    
    $(".clase1.clase2") para seleccionar los elementos que tienen class="clase1 clase2"

    -> Selector asterisco "*": Nos sirve para seleccionar todos los elementos de la página.

    $("*") esto selecciona todos los elementos que tiene la página

    -> Concatenar varios selectores distintos:
    Por último, podemos utilizar varios selectores, para obtener todas las etiquetas que cumplen uno de ellos. No hace falta que cumplan todos los selectores a la vez, sino con que uno de ellos concuerde es suficiente. Para ello colocamos todos los selectores que deseamos, separados por una coma ",".
    
    $("div,p") para seleccionar todos los elementos división y párrafo$(".clase1,.clase2") //selecciona los elementos que tienen la clase "clase1" o "clase2"$("#mi-id,.mi-clase,ul) esto selecciona el elemento con id="mi-id", los elementos con class="mi-clase" y todas las listas UL

*************
HTML
*************

<!DOCTYPE html>
<html>

<head>
    <title>Query Selector Example</title>
</head>

<body>
    <div class="container">
        <p class="color-text">Red text</p>
        <p class="color-text">Blue text</p>
        <p class="color-text">Green text</p>
    </div>
</body>

</html>


***********
JS
***********

const paragraphs = document.querySelectorAll(".color-text");

paragraphs.forEach((elem, index) => {
    if (index === 0) {
        elem.style.color = 'red';
    } else if (index === 1) {
        elem.style.color = 'blue';
    } else {
        elem.style.color = 'green';
    }
});


¿Que es un evento?

En JavaScript, un evento es un mecanismo que permite interactuar y controlar la página web. Los eventos son producidos a medida que los usuarios interactúan con la página, y al ser detectados por JavaScript, pueden desencadenar la ejecución de código. De esta manera, los eventos permiten crear interacciones dinámicas y personalizadas dentro de la página web.

Existen 3 formas principales de manejadores de eventos, donde su variación principal es la sintaxis y la forma de detectar el evento.

    ->Manejadores como atributos HTML

    Este método es el mas sencillo de indicar al código JavaSacript que se produjo un evento, se declara dentro de los atributos del propio elemento HTML, puede ser útil si lo que se desea realizar con el evento es una modificación muy puntual dentro del código, sin embargo, resulta ser poco profesional debido que puede hacer que el código sea mas difícil de mantener a medida que el proyecto incrementa su complejidad.


    -> Manejadores desde Javascript o Manejadores semanticos

    El segundo método es permite tener una estructura entre HTML, CSS y JavaScript muy ordenada, evitando que el código sea excesivamente complicado y facilitando su mantenimiento además de reducir la semántica (de ahí su nombre), es decir, la interpretación y ejecución del código. Este método consiste en asignar funciones externas mediante las propiedades del DOM de cada uno de los elementos.

    ->Listeners

    El tercer método como si nombre lo indica son "Escuchadores" de eventos, los cuales se pueden crear o destruir , su forma de implementarlos es similar a la anterior sin embargo, una de sus principales ventajas es que se puede definir la lógica inmediatamente se declara permitiendo así que el código sea mas sencillo de leer, otra ventaja adicional es que se pueden agregar varios listeners a un mismo elemento HTML para diferentes eventos, lo que convierte este método en el que mayor modularidad y organización del código brinda. Una de las principales diferencias que se pueden observar, dentro de los parámetros de la creación del listener inicialmente se declara el tipo evento que se va a escuchar, el cual en esta ocasión va entre comillas y sin el prefijo 'on', seguido de esto se declara la función que se va a ejecutar.


****************
HTML
****************
<!DOCTYPE html>
<html>

<head>
    <title>Events Introduction</title>
</head>

<body>
    <div class="container">
        <!-- Agregue aquí el botón 1 -->
        <button id="button1" class="button" onclick="clickButton1()">Botón 1</button>
        <!-- Agregue aquí el botón 2 -->
        <button id = "button2" class="button">Botón 2</button>
        <!-- Agregue aquí el botón 3 -->
        <button id = "button3" class="button">Botón 3</button>
        <label id="show">0</label>
        
    </div>
</body>

</html>

****************
CSS
****************

.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-top: 20px 
}
.button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    margin-bottom: 20px;
}

#button1 {
    background-color: #4CAF50;
    color: white;
}

#button2 {
    background-color: #d31111;
    color: white;
}

#button3 {
    background-color: #37259b;
    color: white;
}

****************
JS
****************

let buttonPressed = 0;

//Agregue función botón 1
//Manejadores de atributo
function clickButton1() { 
    buttonPressed = 1;
    render();
}

//Agregue función botón 2
//manejadores semanticos
let button2 = document.getElementById("button2");
button2.onclick = clickButton2;

function clickButton2() { 
    buttonPressed = 2;
    render();
}

//Agregue función botón 3
//listeners
let button3 = document.getElementById("button3");
button3.addEventListener("click", function clickButton3() { 
    buttonPressed = 3;
    render();
});

function render() {
    document.querySelector("#show").innerHTML = `Botón Presionado: ${buttonPressed}`;
    console.log("Botón Presionado: " + buttonPressed)
}



********************************************************
Tipos de evento

Tipos de eventos

Los tipos de eventos son fundamentales en el manejo de eventos de JavaScript ya que permiten que el código corresponda a las acciones ejecutadas por el usuario o interacciones de la pagina web. Muchos de ellos están asociados a elementos HTML, como por ejemplo en la lección anterior el evento onclick, que es comúnmente asociado con botones, sin embargo, también podría activarse por enlaces y demás, a continuación te presento una lista de eventos mas importantes y comunes utilizados en el desarrollo web.

    onclick: Este evento, se aplica en cuando el usuario hace click sobre un elemento de la pagina web, por ejemplo un botón, un enlace, una imagen...etc.

    onscroll: Este evento ocurre cuando un elemento tipo scrollbar es scrolleado, suele usarse para agregar efectos visuales o generar una carga de elementos como una paginación.

    onchange: Este evento, se ejecuta en el momento en que un componente cambia su valor, por ejemplo al ingresar texto en un campo de texto, seccionar una opción de un select, o cambiar el valor de una casilla de verificación ...etc

    onmouseover: Este evento se activa cuando se el cursor del mouse pasa por encima de cualquier elemento de la pagina web.

    onsubmit: Este evento se ejecuta al enviar un formulario, sea por un botón o al presionar la tecla Enter.

*************
HTML
*************
<!DOCTYPE html>
<html>

<head>
    <title>Test</title>
</head>

<body>
    <div class="container">
        <div id="box1" class="box"><label>0</label></div>
        <div id="box2" class="box"><label>0</label></div>
        <div id="box3" class="box"><label>0</label></div>
        <div id="box4" class="box"><label>0</label></div>
    </div>
</body>

</html>

</html>
*************
CSS
*************
body {
			margin: 0;
			padding: 0;
		}

		.container {
			display: grid;
			grid-template-columns: repeat(2, 1fr);
			grid-template-rows: repeat(2, 1fr);
			height: 100vh;
			width: 100vw;
		}

		.box {
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 48px;
			color: white;
		}

		.box:nth-child(1) {
			background-color: #ff4e50;
		}

		.box:nth-child(2) {
			background-color: #49beb7;
		}

		.box:nth-child(3) {
			background-color: #9C27B0;
		}

		.box:nth-child(4) {
			background-color: #f1c40f;
		}
*************
JS
*************
//Agrega tu solución aqui

let box1 = document.querySelector("#box1");
let box2 = document.querySelector("#box2");
let box3 = document.querySelector("#box3");
let box4 = document.querySelector("#box4");

//Funciones para box 1
box1.addEventListener("mouseover", function box1Color() { 
    box1.style.backgroundColor = "#f1c40f";
    box1.style.backgroundColor = '#f1c40f';
    box2.style.backgroundColor = '#49beb7';
    box3.style.backgroundColor = '#9C27B0';
    box4.style.backgroundColor = '#ff4e50';
});

box1.addEventListener("click", function box1Text() { 
    let valBox1 = box1.textContent;
    valBox1++;
    render("box1",valBox1);
});

//Funciones para box 2
box2.addEventListener("mouseover", function box2Color() {
    box1.style.backgroundColor = '#ff4e50';
    box2.style.backgroundColor = '#9C27B0';
    box3.style.backgroundColor = '#49beb7';
    box4.style.backgroundColor = '#f1c40f';
});
box2.addEventListener("click", function box2Text() {
    let valBox = box2.textContent;
    valBox++;
    render("box2", valBox);
});

//Funciones para box 3
box3.addEventListener("mouseover", function box3Color() {
    box1.style.backgroundColor = '#ff4e50';
    box2.style.backgroundColor = '#49beb7';
    box3.style.backgroundColor = '#9C27B0';
    box4.style.backgroundColor = '#f1c40f';
});
box3.addEventListener("click", function box3Text() {
    let valBox = box3.textContent;
    valBox++;
    render("box3", valBox);
});

//Funciones para box 1
box4.addEventListener("mouseover", function box4Color() {
    box1.style.backgroundColor = '#ff4e50';
    box2.style.backgroundColor = '#49beb7';
    box3.style.backgroundColor = '#9C27B0';
    box4.style.backgroundColor = '#f1c40f';
});

box4.addEventListener("click", function box4Text() {
    let valBox = box1.textContent;
    valBox++;
    render("box4", valBox);
});

function render(box, value) { 
    document.querySelector(`#${box}`).innerHTML = value;
}