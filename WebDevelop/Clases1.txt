Vamos a entender qué es getElementById: Es un método con el cual podremos acceder algún elemento mediante su id.


*******
html
*******
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1 id="title">hola mundo</h1>
    <h2 class="sub-title">hola mundo otra vez</h2>
    <ul>
        <li>item-1</li>
        <li>item-2</li>
        <li>item-3</li>
    </ul>
    <button id="change-lists" onclick="changeListDom()">change DOM</button>
</body>

</html>

*******
JS
*******
document.getElementById('title').style.color = 'red'

Así como uno puede modificar la UI desde JS uno también puede acceder a textos del HTML e imprimirlos en la consola. 

*******
JS
*******
let titulo = document.getElementById('title');
let texto = titulo.innerText;
console.log(texto);

¿Qué es getElementsByClassName?

Es un método con el cual podremos acceder a los elementos que contienen la misma clase, la diferencia al método anterior es que este retorna un objeto similar a un array de los elementos que contenga dicha clase.

*******
JS
*******
let resultado = document.getElementsByClassName('sub-title')
let subtitle = resultado[0]
subtitle.style.fontSize = "40px"

¿Qué es getElementsByTagName?

Es un método con el cual podremos acceder a los elementos que contienen la misma etiqueta de HTML, Este es similar al método anterior porqué retorna un objeto similar a un array de los elementos que contenga dicha etiqueta de HTML.

*******
JS
*******
const changeListDom = () => {
    let allContentList = document.getElementsByTagName('li')
    allContentList[0].style.fontSize = "26px"
    allContentList[1].style.background = "red"
    allContentList[2].style.color = "blue"
}

Explicación: El DOM es una estructura tipo árbol:

¡Tipos de datos importantes para el manejo del dom!

A continuación veremos algunos tipos de datos que nos servirán para manejar el contenido de elementos de nuestro documento.

    document: Es todo el documento html de la aplicación.

    element: Se refiere a un elemento o a un nodo de tipo elemento del documento, como por ejemplo una etiqueta <h1> o una lista desordenada, este tipo de dato tiene unos métodos muy importantes que son:

        element.innerHTML: devuelve la sintaxis HTML del elemento y todo lo que está dentro del elemento.

        element.innerText: devuelve el contenido en texto del elemento.

        Nota: estos métodos son modificables.

*******
JS
*******
var changeListDom = () => {
    let mainTitle = document.getElementById('title');
    mainTitle.innerHTML = '<p>ahora es un parrafo</p>'
    let allContentList = document.getElementsByTagName('li');
    allContentList[0].innerText = 'cambiamos el texto'
    console.log(mainTitle)
}

¿ Que es y para qué nos sirve "QuerySelector" ?

Es una biblioteca de JavaScript rápida, pequeña y rica en funciones. Hace que cosas como el recorrido y la manipulación de documentos HTML, el manejo de eventos y la animación sean mucho más simples; Con una combinación de versatilidad y flexibilidad.

Para empezar, veamos un selector. Cuando utilizamos la función querySelector() lo que pasamos como parámetro es el selector. Esta función devuelve justamente los elementos de la página que concuerdan con el selector enviado por parámetro, estos pueden ser: # para ID, (.) Para clases, para referirnos a una etiqueta HTML, entre otros.

*****************
HTML
*****************

<!DOCTYPE html>
<html>

<head>
    <title>QuerySelector example</title>
</head>

<body>
    <h1>My web page</h1>
    <p id="paragraph1">This is a paragraph</p>
    <p class="paragraph">This is another paragraph</p>
    <p class="paragraph">Other</p>
    <p class="paragraph">And one more paragraph</p>
    <ul>
        <li>Element 1</li>
        <li>Element 2</li>
        <li>Element 3</li>
    </ul>
</body>

</html>

*****************
JS
*****************
// escribe tu codigo aqui
const myParagraph = document.querySelector("#paragraph1");
// cambia el contenido del parrafo aqui
myParagraph.textContent = "- This is the new paragraph content -";
// llama los id con clase parrafo aqui
const myParagraphs = document.querySelectorAll(".paragraph");
console.log(myParagraphs)


********    SELECTORES BÁSICOS     ************



    ->Selector de etiquetas: $("h1") //selecciona todos los encabezados de nivel 1.

    ->Selector por identificador: Sirven para seleccionar los elementos que tengan un identificador dado, que se asigna a las etiquetas a través del atributo id del HTML. Para utilizar este selector se indica primero el carácter "#" y luego el identificador de cuyo elemento se desee seleccionar.

    $("#id-elemento") esto selecciona una etiqueta que tiene el atributo id="id-elemento"

    ->Selector por clase: Podemos indicar el nombre de una clase (class de CSS) y seleccionar todos los elementos a los que se ha aplicado esta clase. Para ello, como en CSS, comenzamos colocando el carácter "." y luego el nombre de la clase que deseamos seleccionar.

    $(".mi-clase") para seleccionar todos los elementos que tienen el atributo class="mi-clase"

    -> Selector por varias clases: Si lo deseamos, podemos indicar varias clases CSS, para obtener todos los elementos que tienen esas clases aplicadas: todas al mismo tiempo. Esto se consigue comenzando por un ".", igual que los selectores de clases, y luego otro "." para separar las distintas clases que queremos utilizar en el selector.
    
    $(".clase1.clase2") para seleccionar los elementos que tienen class="clase1 clase2"

    -> Selector asterisco "*": Nos sirve para seleccionar todos los elementos de la página.

    $("*") esto selecciona todos los elementos que tiene la página

    -> Concatenar varios selectores distintos:
    Por último, podemos utilizar varios selectores, para obtener todas las etiquetas que cumplen uno de ellos. No hace falta que cumplan todos los selectores a la vez, sino con que uno de ellos concuerde es suficiente. Para ello colocamos todos los selectores que deseamos, separados por una coma ",".
    
    $("div,p") para seleccionar todos los elementos división y párrafo$(".clase1,.clase2") //selecciona los elementos que tienen la clase "clase1" o "clase2"$("#mi-id,.mi-clase,ul) esto selecciona el elemento con id="mi-id", los elementos con class="mi-clase" y todas las listas UL

*************
HTML
*************

<!DOCTYPE html>
<html>

<head>
    <title>Query Selector Example</title>
</head>

<body>
    <div class="container">
        <p class="color-text">Red text</p>
        <p class="color-text">Blue text</p>
        <p class="color-text">Green text</p>
    </div>
</body>

</html>


***********
JS
***********

const paragraphs = document.querySelectorAll(".color-text");

paragraphs.forEach((elem, index) => {
    if (index === 0) {
        elem.style.color = 'red';
    } else if (index === 1) {
        elem.style.color = 'blue';
    } else {
        elem.style.color = 'green';
    }
});