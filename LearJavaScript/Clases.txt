La forma para definir funciones en JavaScript es similar a coomo se hace en C/C++
Y se se pueden definir tres tipos de variables
    -> let: Define una variable en el entorno local
    -> var: define una variable que se utilizara en muchas partes
    -> const: define una variable que no se modificará en todo el programa

Acontinuación un ejemeplo de definición de una función

function holaMundo() {
    // Escribe tu código aquí
    let saludo = "¡Hola Mundo!";
    return saludo;
}

Un error muy común que suele ocurrir al momento de trabajar con variables 
es ReferenceError, esto ocurre cuando intentamos hacer referencia a alguna variable
que no está definida en el código.

JavaScript soporta una amplia cantidad de tipos de datos, estos son los principales que podemos encontrar en este lenguaje:

String: Representa un texto.

Number: Representa un número en cualquier rango de valores.

Boolean: Representa un valor verdadero o falso es decir true o false.

null: Representa la ausencia de un dato.

Array: Lista de datos que puede ser recorrida (iterada) se forma con ([...]).

Object: Almacena un grupo de datos como los anteriores se forma con corchetes ({...}).

function tipoDeDatos() { 
    let saludo = "¡Hola mundo!";
    let siete = 7;
    let auto = {
        color: "azul",
        marca: "mitsubishi"
    };
    let tareas = ["Cepillar mis dientes", "Hacer mís tareas"];
    let booleano = true;
    let nada = null;

    return [saludo,siete,auto,tareas,booleano,nada]
}

Los operadores matemáticos tal y como su nombre indica nos permiten operar con números para obtener un resultado esperado, al igual que con los tipos de datos existen varios, algunos más avanzados que otros, en este caso nos concentramos en los 5 principales los cuales son:

    La suma representada con el signo +

    La resta representada con el signo -

    La multiplicación representada con el signo *

    La división representada con el signo /

    Módulo representado con el signo %; el módulo es el residuo de la división

En JavaScript se utiliza el signo + para realizar la concatenación de String, como por ejemplo:

function concatenacion() {
    // Escribe tu código aquí
    let lenguaje = 'JavaScript';
    let saludo = 'Hola soy ' + lenguaje + " tu mejor amigo por siempre";
}

Salida en consola (console.log)

La impresión en pantalla es uno de los superpoderes de los que gozamos los desarrolladores de software ya que nos permite previsualizar un valor como por ejemplo un número, un string y demás, todo esto sin que el usuario final se percate de que está pasando al interior de nuestro código.

Podemos utilizar console.log tantas veces como lo necesitemos en un mismo programa.

En JavaScript se tienen los siguientes comparadores lógicos.

    > mayor que…

    < menor que…

    >= mayor o igual que…

    <= menor o igual que…

    === igual que…

    !== diferente que…

JavaScript es sencible al uso de mayusculas

Condicionales:
    -> if: Es el primer nivel de los condicionales y a su vez el más importante ya que representa la estructura inicial; la forma en la que esta condición o sentencia funciona es mediante comparaciones.
    -> else: La sentencia else se ejecutará siempre que la o las condiciones anteriores no se cumplan
    -> else if: nos permite declarar nuevas condiciones para evaluar,

Existen 3 operadores lógicos, en JavaScript su representación es la siguiente:

    ->AND (&&) = se asegura de que todas expresiones son verdaderas

    ->OR (||) = se asegura de que al menos una expresión son verdadera

    ->NOT (!) = niega el resultado de una expresión, por ejemplo si el false la convierte en true y viceversa

El ciclo for…of recorre cada elemento en una lista o array y lo almacena en una variable temporal que cambiará su valor en cada vuelta 

el método push(), este agregará el último participante inscrito al final de la lista, la forma correcta de utilizar el método push es mediante el uso de un punto ". " como unión entre la lista y el propio método.

Generalmente un programa informático se encuentra dividido en varias partes para facilitar su lectura y su mantenimiento, una las maneras más básicas en las cuales podemos hacer dichas separaciones es mediante la implementación de bloques de código.

Una función, en pocas palabras, es un bloque de código que tiene encargada una funcionalidad, de allí su nombre. Dichas funciones pueden ser invocadas en cualquier momento haciendo uso de su nombre a esto se le llama referenciar.

un objeto literal de JavaScript es un conjunto de datos almacenados en forma de clave - valor, estos están delimitados por los signos de llaves {...} y generalmente se asignan a una variable.

 las claves van seguidas de dos puntos : y no utilizan comillas, por su parte las definiciones o valores son un tipo de dato, en este caso strings o cadenas de texto, por lo que debemos utilizar las comillas "...", finalmente cada pareja de clave y valor finaliza con una coma ( , ) esto es muy importante ya que de otro modo el programa dará error.

 Ejemplo de descripcion de un objeto
 function objetosLiterales() {
  // crea tu objeto aquí
  let automovil = {
    marca: "Renault",
    color: "Rojo",
    modelo: 2006
  }
  // imprime el objeto aquí
  return automovil;
}

Como adelanto debes saber que hay dos formas de acceder a los valores de un objeto literal, estás son mediante el uso de un punto o utilizando los corchetes [...], no obstante para esta ocasión nos concentraremos en la más estandarizada y comúnmente implementada que es la nomenclatura del punto.

Ejemplos de acceso a un valor en un objeto:
    ->console.log(automovil.color);
	->console.log(automovil["color"]);

Para impirme mediante consola debemos convertir un objeto a JSON de la siguiente manera:

    ->console.log(JSON.stringify(objeto));

Ahora veamos cómo eliminar un valor ya existente por ejemplo el color para ello utilizamos la palabra reservada delete seguida del valor a eliminar, nuevamente haciendo uso del punto.

    ->delete automovil.color;

para agregar un valor;

    ->objeto.atributo = "Valor"

function objetosLiterales() {
    let concesionarioDeCoches = [
        { marca: "Chevrolet", color: "verde", ventanas: 4, modelo: 2015 },
        { marca: "Mustang", color: "azul", ventanas: 6, modelo: 2022 },
        { marca: "Renault", color: "gris", ventanas: 6, modelo: 2009 }
    ];

    // Escribe tu código aquí
    console.log("En este momento tenemos " + concesionarioDeCoches.length + " coches");

    concesionarioDeCoches.push({ marca: "Sedán", color: "rojo", ventanas: 5, modelo: 2018 });
    concesionarioDeCoches.push({ marca: "Toyota", color: "negro", ventanas: 6, modelo: 2021 });

    console.log("Acaba de llegar un nuevo cargamento con 2 vehículos, por lo tanto ahora hay  " +
        concesionarioDeCoches.length + " coches en el concesionario");

    console.log("Empleado: Hola, puedo ayudarle en algo señor/a");
    console.log("Cliente: Hola, estoy buscando un auto, podría mostrarme los que tiene disponibles, por favor");
    console.log("Empleado: Claro, pase por favor");

    for (let coche of concesionarioDeCoches) {
        console.log("Estás viendo el coche " + coche.marca)
    }

    let cocheElegido = concesionarioDeCoches[1];
    console.log("Este coche de la marca " + cocheElegido.marca + " ,tiene un hermoso color " + cocheElegido.color +
        " posee " + cocheElegido.ventanas + " ventanas, y es modelo " + cocheElegido.modelo);
    return concesionarioDeCoches;
}


El ciclo while es bastante similar a ciclo for, es decir, ambos están diseñados para ejecutarse una y otra vez dependiendo de la condición, la diferencia radica en cuántas veces se ejecutan, mientras que el for lo utilizamos comúnmente para recorrer listas o rangos, el ciclo while suele ser más utilizado cuando no tenemos idea de en qué momento va a terminar el propio ciclo.


El ciclo do…while tiene una única diferencia con el ciclo while simple, y esta es que sin importar cual sea la condición el programa ejecutará el bloque correspondiente al menos una vez esto lo hace muy útil en caso de que necesitemos que un programa implemente dicha funcionalidad.

*************************************

PROGRAMCIÓN ORIENTADA A OBJECTOS.

*************************************

Las clases, son un molde con el que podemos crear objetos.
Como ves crear una clase es bastante sencillo, lo único que debemos hacer es digitar la palabra reservada class seguido del nombre de nuestra clase.

Los atributos son todo lo que puede poseer un objeto.

Un atributo es muy similar a una variable con la única diferencia que no utilizamos las palabras reservadas let, var o const para crearlos.

NOTA: cuando creamos el objeto o variable, la clase tiene unos paréntesis de apertura y cierre, estos se usan para pasar datos como si fueran los parámetros de una función. Veremos esto más adelante.

Los métodos son las acciones que puede realizar un objeto

NOTA: Cada acción tiene un verbo asociado, (presentarse, realizar y tocar,etc.), aunque no sea una regla irrompible por convención se suelen utilizar los verbos ya que expresan exactamente qué acción llevará a cabo el método, a esto se le conocen como buenas prácticas de programación.

Para crear métodos su sintaxis es muy similar a la utilizada al crear funciones con la diferencia que la palabra reservada function no se utiliza.

Muchas veces vamos a necesitar referenciar un atributo o método dentro de la clase, para eso requerimos hacer uso de la sentencia this.

class BandaDeRock {
    nombre = "Dragons";
    numeroIntegrantes = 6;

    presentarse() {
        return "Hola nosotros somos " + this.nombre + " una banda de Rock con " + this.numeroIntegrantes + " integrantes";
    }
}

function principal() {
    let miBanda = new BandaDeRock();
    // Imprime la presentación de tu banda aquí
    console.log(miBanda.presentarse());
    return miBanda.presentarse();
}

Un constructor es un método que se utiliza, como su nombre lo indica, para construir un objeto digamos que de una forma un poco más personalizada.

El método constructor es la mejor forma de inicializar atributos como lo veremos más adelante, su funcionamiento es muy similar a una función con parámetros, piensa que si la clase es el molde de un objeto entonces el constructor es quien se encarga de que se ensamble perfectamente dicho objeto

class BandaDeRock {
    // Crea el constructor aquí
    constructor(nombre, numeroIntegrantes) {
        this.nombre = nombre;
        this.numeroIntegrantes = numeroIntegrantes;
    }

    presentarse() {
        return "Hola nosotros somos " + this.nombre + " una banda de Rock con " + this.numeroIntegrantes + " integrantes";
    }
}

function principal() {
    // Crea tu banda aquí
    let miBanda = new BandaDeRock("Titans", 4);
    // Imprime la precentación de tu banda
    console.log(miBanda.presentarse());
    // Crea la banda de Daniela aquí
    let laBandaDeDaniela = new BandaDeRock("DanDan-Band", 5);
    // Imprime la presentación de la banda de Daniela
    console.log(laBandaDeDaniela.presentarse());

    return laBandaDeDaniela.presentarse();
}

************************

HERENCIA

************************

Técnicamente hablando, un objeto es el resultado de asignar a una variable  los métodos y atributos de una clase, a esto se le conoce como instancia.

Hablamos de herencia cuando una clase hija hereda o extiende los atributos y métodos de una clase padre.

heredar en lenguaje JavaScript se escribe como extends.

Al trabajar con herencia es muy común que queramos pasar datos de una clase hijo a la clase padre, sobre todo al momento de crear un objeto ya que dicha clase padre seguramente también posea un método constructor, para eso utilizamos el método super() el cual ya viene incorporado en JavaScript listo para utilizar,

En resumen, el método super() se utiliza para enviar valores a la clase padre a través de una clase hijo.

La sobreescritura de métodos es la acción de reescribir lo que hace un método que pertenezca a una clase, generalmente se sobreescriben los métodos que son heredados aunque no es una regla estricta.

Los getters y setters son métodos especiales que utilizamos para obtener información de los atributos en una clase o modificarla, si bien su uso no es una regla general, se considera una buena práctica de programación que vale la pena aprender, ya que puedes encontrarte su sintaxis en muchos lugares

Los getters son los métodos que se encargan de traer la información almacenada en los atributos de una clase.

Los setters son los métodos que se utilizan para modificar el valor de un atributo, por ejemplo,

class Vehiculo {
    constructor(color, marca, ruedas) {
        this._color = color;
        this._marca = marca;
        this._ruedas = ruedas
    }

    moverse() {
        return 'Este veiculo de color ' + this._color + ' se desplaza en ' + this._ruedas + ' ruedas';
    }

    // construye el método get aquí
    get color() {
        return this._color
    }

    // Construye el método set aquí
    set color(newColor) {
        this._color = newColor;
    }
}

class Motocicleta extends Vehiculo {
    constructor(color, marca, ruedas) {
        super(color, marca, ruedas);
    }

    moverse() {
        return "Esta moto de color " + this._color + " se desplaza en " + this._ruedas + " ruedas";
    }
}

function principal() {
    let miMotocicleta = new Motocicleta('Rojo', 'Suzuki', 2);

    // Imprime el color de la motocicleta
    console.log(miMotocicleta.color);
    // Modifica el color de la motocicleta
    miMotocicleta.color = 'Negro';
    // Retorna el color de la motocicleta
    return miMotocicleta.color;
}



******

Operadores ternarios.

******


Un operador ternario en JavaScript es, en pocas palabras, una contracción de las sentencias if y else, la principal diferencia que podemos encontrar es que utilizar este operador es mucho más corto, además en la mayoría de los casos es más entendible.

sintaxis:
condicion ? expresión1 : expresión2;

Fíjate que la forma de utilizar el operador ternario es mediante una condición que se evaluará como true o false, luego el signo de pregunta (?) seguido de lo que hará si la condición es verdadera (true), por último se utilizan dos puntos ( : ) y lo que pasará si la condición es falsa (false).


La sentencia switch es comúnmente utilizada al momento de trabajar con cadenas que requieran más de una condición, el uso de la sentencia switch reemplaza, en ciertas ocasiones, las sentencias if, else if y else mediante una sintaxis más sencilla.

Se digita la palabra reservada switch seguida de paréntesis ( y la variable que deseamos comparar), por último se utilizan llaves {...} 

Para utilizar la interpolación se utilizan backticks o comillas invertidas (`...`) y, donde se quiera reemplazar un valor se añade un signo de dólar más llaves de apertura y cierre ${...}, al interior de dichas llaves se ubica el valor que deseamos concatenar.