La forma para definir funciones en JavaScript es similar a coomo se hace en C/C++
Y se se pueden definir tres tipos de variables
    -> let: Define una variable en el entorno local
    -> var: define una variable que se utilizara en muchas partes
    -> const: define una variable que no se modificará en todo el programa

Acontinuación un ejemeplo de definición de una función

function holaMundo() {
    // Escribe tu código aquí
    let saludo = "¡Hola Mundo!";
    return saludo;
}

Un error muy común que suele ocurrir al momento de trabajar con variables 
es ReferenceError, esto ocurre cuando intentamos hacer referencia a alguna variable
que no está definida en el código.

JavaScript soporta una amplia cantidad de tipos de datos, estos son los principales que podemos encontrar en este lenguaje:

String: Representa un texto.

Number: Representa un número en cualquier rango de valores.

Boolean: Representa un valor verdadero o falso es decir true o false.

null: Representa la ausencia de un dato.

Array: Lista de datos que puede ser recorrida (iterada) se forma con ([...]).

Object: Almacena un grupo de datos como los anteriores se forma con corchetes ({...}).

function tipoDeDatos() { 
    let saludo = "¡Hola mundo!";
    let siete = 7;
    let auto = {
        color: "azul",
        marca: "mitsubishi"
    };
    let tareas = ["Cepillar mis dientes", "Hacer mís tareas"];
    let booleano = true;
    let nada = null;

    return [saludo,siete,auto,tareas,booleano,nada]
}

Los operadores matemáticos tal y como su nombre indica nos permiten operar con números para obtener un resultado esperado, al igual que con los tipos de datos existen varios, algunos más avanzados que otros, en este caso nos concentramos en los 5 principales los cuales son:

    La suma representada con el signo +

    La resta representada con el signo -

    La multiplicación representada con el signo *

    La división representada con el signo /

    Módulo representado con el signo %; el módulo es el residuo de la división

En JavaScript se utiliza el signo + para realizar la concatenación de String, como por ejemplo:

function concatenacion() {
    // Escribe tu código aquí
    let lenguaje = 'JavaScript';
    let saludo = 'Hola soy ' + lenguaje + " tu mejor amigo por siempre";
}

Salida en consola (console.log)

La impresión en pantalla es uno de los superpoderes de los que gozamos los desarrolladores de software ya que nos permite previsualizar un valor como por ejemplo un número, un string y demás, todo esto sin que el usuario final se percate de que está pasando al interior de nuestro código.

Podemos utilizar console.log tantas veces como lo necesitemos en un mismo programa.

En JavaScript se tienen los siguientes comparadores lógicos.

    > mayor que…

    < menor que…

    >= mayor o igual que…

    <= menor o igual que…

    === igual que…

    !== diferente que…

JavaScript es sencible al uso de mayusculas

Condicionales:
    -> if: Es el primer nivel de los condicionales y a su vez el más importante ya que representa la estructura inicial; la forma en la que esta condición o sentencia funciona es mediante comparaciones.
    -> else: La sentencia else se ejecutará siempre que la o las condiciones anteriores no se cumplan
    -> else if: nos permite declarar nuevas condiciones para evaluar,

Existen 3 operadores lógicos, en JavaScript su representación es la siguiente:

    ->AND (&&) = se asegura de que todas expresiones son verdaderas

    ->OR (||) = se asegura de que al menos una expresión son verdadera

    ->NOT (!) = niega el resultado de una expresión, por ejemplo si el false la convierte en true y viceversa

El ciclo for…of recorre cada elemento en una lista o array y lo almacena en una variable temporal que cambiará su valor en cada vuelta 

el método push(), este agregará el último participante inscrito al final de la lista, la forma correcta de utilizar el método push es mediante el uso de un punto ". " como unión entre la lista y el propio método.

Generalmente un programa informático se encuentra dividido en varias partes para facilitar su lectura y su mantenimiento, una las maneras más básicas en las cuales podemos hacer dichas separaciones es mediante la implementación de bloques de código.

Una función, en pocas palabras, es un bloque de código que tiene encargada una funcionalidad, de allí su nombre. Dichas funciones pueden ser invocadas en cualquier momento haciendo uso de su nombre a esto se le llama referenciar.

un objeto literal de JavaScript es un conjunto de datos almacenados en forma de clave - valor, estos están delimitados por los signos de llaves {...} y generalmente se asignan a una variable.

 las claves van seguidas de dos puntos : y no utilizan comillas, por su parte las definiciones o valores son un tipo de dato, en este caso strings o cadenas de texto, por lo que debemos utilizar las comillas "...", finalmente cada pareja de clave y valor finaliza con una coma ( , ) esto es muy importante ya que de otro modo el programa dará error.

 Ejemplo de descripcion de un objeto
 function objetosLiterales() {
  // crea tu objeto aquí
  let automovil = {
    marca: "Renault",
    color: "Rojo",
    modelo: 2006
  }
  // imprime el objeto aquí
  return automovil;
}

Como adelanto debes saber que hay dos formas de acceder a los valores de un objeto literal, estás son mediante el uso de un punto o utilizando los corchetes [...], no obstante para esta ocasión nos concentraremos en la más estandarizada y comúnmente implementada que es la nomenclatura del punto.

Ejemplos de acceso a un valor en un objeto:
    ->console.log(automovil.color);
	->console.log(automovil["color"]);

Para impirme mediante consola debemos convertir un objeto a JSON de la siguiente manera:

    ->console.log(JSON.stringify(objeto));

Ahora veamos cómo eliminar un valor ya existente por ejemplo el color para ello utilizamos la palabra reservada delete seguida del valor a eliminar, nuevamente haciendo uso del punto.

    ->delete automovil.color;

para agregar un valor;

    ->objeto.atributo = "Valor"

function objetosLiterales() {
    let concesionarioDeCoches = [
        { marca: "Chevrolet", color: "verde", ventanas: 4, modelo: 2015 },
        { marca: "Mustang", color: "azul", ventanas: 6, modelo: 2022 },
        { marca: "Renault", color: "gris", ventanas: 6, modelo: 2009 }
    ];

    // Escribe tu código aquí
    console.log("En este momento tenemos " + concesionarioDeCoches.length + " coches");

    concesionarioDeCoches.push({ marca: "Sedán", color: "rojo", ventanas: 5, modelo: 2018 });
    concesionarioDeCoches.push({ marca: "Toyota", color: "negro", ventanas: 6, modelo: 2021 });

    console.log("Acaba de llegar un nuevo cargamento con 2 vehículos, por lo tanto ahora hay  " +
        concesionarioDeCoches.length + " coches en el concesionario");

    console.log("Empleado: Hola, puedo ayudarle en algo señor/a");
    console.log("Cliente: Hola, estoy buscando un auto, podría mostrarme los que tiene disponibles, por favor");
    console.log("Empleado: Claro, pase por favor");

    for (let coche of concesionarioDeCoches) {
        console.log("Estás viendo el coche " + coche.marca)
    }

    let cocheElegido = concesionarioDeCoches[1];
    console.log("Este coche de la marca " + cocheElegido.marca + " ,tiene un hermoso color " + cocheElegido.color +
        " posee " + cocheElegido.ventanas + " ventanas, y es modelo " + cocheElegido.modelo);
    return concesionarioDeCoches;
}